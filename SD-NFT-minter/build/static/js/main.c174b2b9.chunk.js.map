{"version":3,"sources":["util/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["web3","process","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","require","contractABI","contractAddress","readContract","a","eth","Contract","methods","_tokenIdCounter","call","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","tokenURI","contract","token_num","URI2","console","log","transactionParameters","to","from","selectedAddress","safeMint","encodeABI","params","txHash","success","Minter","props","useState","walletAddress","setWallet","setStatus","setURL","NFTnum","setNFTnum","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","src","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c174b2b9.chunk.js","sourcesContent":["//require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(\"wss://eth-goerli.g.alchemy.com/v2/PkUo5mwaj5E1lvZNEJC6coVLyhdDg3Wu\");\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0x9e7EBB6590cc4cEEe704C856373A4991eF5817D7\";\r\n\r\nexport const readContract = async () => {\r\n  const a = (await new web3.eth.Contract(contractABI, contractAddress));\r\n  return (await a.methods._tokenIdCounter().call())\r\n};//loadContract();\r\n\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"👆🏽\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const mintNFT = async (url, name, description) => {\r\n  const tokenURI = \"https://ipfs.filebase.io/ipfs/QmUp4Zr5YU5z87D9fzmNaZ8gxYhmCBQG6kK2LebBZC8cCL/\";\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);//loadContract();\r\n  const token_num = await window.contract.methods._tokenIdCounter().call();\r\n  const URI2 = tokenURI + token_num;\r\n  console.log(URI2)\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.safeMint(window.ethereum.selectedAddress, URI2).encodeABI() //make call to NFT smart contract \r\n  };\r\n  console.log(URI2)\r\n\r\n  //sign transaction via Metamask\r\n  try {\r\n    const txHash = await window.ethereum\r\n      .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n      });\r\n    return {\r\n      success: true,\r\n      status: \"✅ Check out your transaction on Etherscan: https://goerli.etherscan.io/tx/\" + txHash\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT, readContract } from \"./util/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n  const [NFTnum, setNFTnum] = useState(\"\");\r\n\r\n  useEffect(async () => {\r\n    const { address, status } = await getCurrentWalletConnected();\r\n    const NFTnum = await readContract();\r\n    setWallet(address);\r\n    setStatus(status);\r\n    setNFTnum(NFTnum);\r\n    setURL(\"https://ipfs.filebase.io/ipfs/Qme7Bb8vjjbEDJK2apW6XdTZpTRNiGGieth5JReBbwRbYd/\" + NFTnum + \".png\");\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">Stable Diffusion NFT Minter</h1>\r\n      <div>\r\n        <h3>\r\n          Here is the next NFT to be minted if you like it you can press \"Mint.\"\r\n        </h3>\r\n        <p>NFT Number {NFTnum} </p>\r\n        <p id=\"status\">\r\n          {status}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <img\r\n          src={url}\r\n          alt=\"nft\"\r\n        />\r\n      </div>\r\n\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}